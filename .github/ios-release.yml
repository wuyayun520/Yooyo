name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products
          
      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app
        
      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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


          certificate-password: 111111
          
          provisioning-profile-base64: 

          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa


      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/yooyo.ipa"
          APPLE_ID: "sunzhiqing@lapininternationaltra.shop"
          APP_SPECIFIC_PASSWORD: "jxwl-pkbk-ttkj-orhe"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
